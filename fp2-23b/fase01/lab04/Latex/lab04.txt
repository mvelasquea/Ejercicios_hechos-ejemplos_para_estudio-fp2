import java.util.*;

public class DemoBatalla_v2 {

    public static void main(String[] args) {
        Nave[] misNaves = new Nave[3];
        Scanner entrada = new Scanner(System.in);
        String nomb, col;
        int fil, punt;
        boolean est;

        for (int i = 0; i < misNaves.length; i++) {
            System.out.println("Nave " + (i + 1));
            System.out.print("Nombre: ");
            nomb = entrada.next();
            System.out.println("Fila: ");
            fil = entrada.nextInt();
            System.out.print("Columna: ");
            col = entrada.next();
            System.out.print("Estado: ");
            est = entrada.nextBoolean();
            System.out.print("Puntos: ");
            punt = entrada.nextInt();
            misNaves[i] = new Nave();
            misNaves[i].setNombre(nomb);
            misNaves[i].setFila(fil);
            misNaves[i].setColumna(col);
            misNaves[i].setEstado(est);
            misNaves[i].setPuntos(punt);
        }

        System.out.println("\nNaves creadas:");
        mostrarNaves(misNaves);
        mostrarPorNombre(misNaves);
        mostrarPorPuntos(misNaves);

        // Encontrar la nave con mayor número de puntos
        Nave naveMayorPuntos = mostrarMayorPuntos(misNaves);
        System.out.println("\nNave con mayor número de puntos:");
        mostrarNave(naveMayorPuntos);

        // Búsqueda y ordenamientos
        System.out.print("\nIngrese el nombre de la nave a buscar: ");
        String nombreBusqueda = entrada.next();
        int pos = busquedaLinealNombre(misNaves, nombreBusqueda);
        if (pos != -1) {
            System.out.println("Nave encontrada en la posición " + pos + ":");
            mostrarNave(misNaves[pos]);
        } else {
            System.out.println("Nave no encontrada.");
        }

        ordenarPorPuntosBurbuja(misNaves);
        System.out.println("\nNaves ordenadas por puntos (Burbuja):");
        mostrarNaves(misNaves);

        ordenarPorNombreBurbuja(misNaves);
        System.out.println("\nNaves ordenadas por nombre (Burbuja):");
        mostrarNaves(misNaves);

        pos = busquedaBinariaNombre(misNaves, nombreBusqueda);
        if (pos != -1) {
            System.out.println("\nNave encontrada en la posición " + pos + ":");
            mostrarNave(misNaves[pos]);
        } else {
            System.out.println("Nave no encontrada.");
        }

      ordenarPorPuntosSeleccion(misNaves);
        System.out.println("\nNaves ordenadas por puntos (Selección):");
        mostrarNaves(misNaves);

        ordenarPorPuntosInsercion(misNaves);
        System.out.println("\nNaves ordenadas por puntos (Inserción):");
        mostrarNaves(misNaves);

        ordenarPorNombreSeleccion(misNaves);
        System.out.println("\nNaves ordenadas por nombre (Selección):");
        mostrarNaves(misNaves);

        ordenarPorNombreInsercion(misNaves);
        System.out.println("\nNaves ordenadas por nombre (Inserción):");
        mostrarNaves(misNaves);
    }

    public static void mostrarNaves(Nave[] flota) {
        for (int i = 0; i < flota.length; i++) {
            mostrarNave(flota[i]);
        }
    }

    public static void mostrarNave(Nave nave) {
        System.out.println("NOMBRE: " + nave.getNombre());
        System.out.println("FILA: " + nave.getFila());
        System.out.println("COLUMNA: " + nave.getColumna());
        if (nave.getEstado()) {
            System.out.println("Estado: Vivo");
        } else {
            System.out.println("Estado: Muerto");
        }
        System.out.println("PUNTOS DE VIDA: " + nave.getPuntos());
    }

    public static void mostrarPorNombre(Nave[] flota) {
        String nombre;
        System.out.println("\nIngrese el nombre de la nave a buscar:");
        Scanner objeto = new Scanner(System.in);
        nombre = objeto.nextLine();
        int pos = busquedaLinealNombre(flota, nombre);
        if (pos != -1) {
            System.out.println("Nave encontrada en la posición " + pos + ":");
            mostrarNave(flota[pos]);
        } else {
            System.out.println("Nave no encontrada.");
        }
    }

    public static void mostrarPorPuntos(Nave[] flota) {
        System.out.println("\nIngrese la cantidad de vida para comparar:");
        Scanner objeto = new Scanner(System.in);
        int puntoComparacion = objeto.nextInt();
        for (int i = 0; i < flota.length; i++) {
            if (flota[i].getPuntos() <= puntoComparacion) {
                System.out.println("Nave con menos de " + puntoComparacion + " puntos de vida:");
                mostrarNave(flota[i]);
            }
        }
    }

    public static Nave mostrarMayorPuntos(Nave[] flota) {
        Nave naveMayor = flota[0];
        for (int i = 1; i < flota.length; i++) {
            if (flota[i].getPuntos() > naveMayor.getPuntos()) {
                naveMayor = flota[i];
            }
        }
        return naveMayor;
    }

    public static int busquedaLinealNombre(Nave[] flota, String nombre) {
        for (int i = 0; i < flota.length; i++) {
            if (flota[i].getNombre().equalsIgnoreCase(nombre)) {
                return i; // Retorna la posición de la nave encontrada
            }
        }
        return -1; // Nave no encontrada
    }

    public static void ordenarPorPuntosBurbuja(Nave[] flota) {
        boolean intercambiado;
        do {
            intercambiado = false;
            for (int i = 0; i < flota.length - 1; i++) {
                if (flota[i].getPuntos() > flota[i + 1].getPuntos()) {
                    // Intercambiar las naves si están fuera de orden
                    Nave temp = flota[i];
                    flota[i] = flota[i + 1];
                    flota[i + 1] = temp;
                    intercambiado = true;
                }
            }
        } while (intercambiado);
    }

    public static void ordenarPorNombreBurbuja(Nave[] flota) {
        boolean intercambiado;
        do {
            intercambiado = false;
            for (int i = 0; i < flota.length - 1; i++) {
                if (flota[i].getNombre().compareTo(flota[i + 1].getNombre()) > 0) {
                    // Intercambiar las naves si están fuera de orden
                    Nave temp = flota[i];
                    flota[i] = flota[i + 1];
                    flota[i + 1] = temp;
                    intercambiado = true;
                }
            }
        } while (intercambiado);
    }

    public static int busquedaBinariaNombre(Nave[] flota, String nombre) {
        Arrays.sort(flota, Comparator.comparing(Nave::getNombre)); // Asegurar que el arreglo esté ordenado por nombre
        int inicio = 0;
        int fin = flota.length - 1;
        while (inicio <= fin) {
            int medio = inicio + (fin - inicio) / 2;
            int comparacion = nombre.compareTo(flota[medio].getNombre());
            if (comparacion == 0) {
                return medio; // Se encontró la nave
            } else if (comparacion < 0) {
                fin = medio - 1;
            } else {
                inicio = medio + 1;
            }
        }
        return -1; // Nave no encontrada
    }

    public static void ordenarPorPuntosSeleccion(Nave[] flota) {
        for (int i = 0; i < flota.length - 1; i++) {
            int indiceMinimo = i;
            for (int j = i + 1; j < flota.length; j++) {
                if (flota[j].getPuntos() < flota[indiceMinimo].getPuntos()) {
                    indiceMinimo = j;
                }}
             Nave temp = flota[i];
            flota[i] = flota[indiceMinimo];
            flota[indiceMinimo] = temp;
        }}
    public static void ordenarPorPuntosInsercion(Nave[] flota) {
        for (int i = 1; i < flota.length; i++) {
            Nave naveActual = flota[i];
            int j = i - 1;
            while (j >= 0 && flota[j].getPuntos() > naveActual.getPuntos()) {
                flota[j + 1] = flota[j];
                j--;
            }
            flota[j + 1] = naveActual;
        } }

    public static void ordenarPorNombreSeleccion(Nave[] flota) {
        for (int i = 0; i < flota.length - 1; i++) {
            int indiceMinimo = i;
            for (int j = i + 1; j < flota.length; j++) {
                if (flota[j].getNombre().compareTo(flota[indiceMinimo].getNombre()) < 0) {
                    indiceMinimo = j;
                }
            }
            // Intercambiar la nave actual con la nave de menor nombre
            Nave temp = flota[i];
            flota[i] = flota[indiceMinimo];
            flota[indiceMinimo] = temp;
        }}
    public static void ordenarPorNombreInsercion(Nave[] flota) {
        for (int i = 1; i < flota.length; i++) {
            Nave naveActual = flota[i];
            int j = i - 1;
            while (j >= 0 && naveActual.getNombre().compareTo(flota[j].getNombre()) < 0) {
                flota[j + 1] = flota[j];
                j--;
            }
            flota[j + 1] = naveActual;
        }}}

