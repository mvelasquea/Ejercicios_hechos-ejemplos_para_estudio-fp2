%package list
\documentclass{article}
\usepackage[top=3cm, bottom=3cm, outer=3cm, inner=3cm]{geometry}
\usepackage{multicol}
\usepackage{graphicx}
\usepackage{url}
%\usepackage{cite}
\usepackage{hyperref}
\usepackage{array}
%\usepackage{multicol}
\newcolumntype{x}[1]{>{\centering\arraybackslash\hspace{0pt}}p{#1}}
\usepackage{natbib}
\usepackage{pdfpages}
\usepackage{multirow}
\usepackage[normalem]{ulem}
\useunder{\uline}{\ul}{}
\usepackage{svg}
\usepackage{xcolor}
\usepackage{listings}
\lstdefinestyle{ascii-tree}{
    literate={├}{|}1 {─}{--}1 {└}{+}1 
  }
\lstset{basicstyle=\ttfamily,
  showstringspaces=false,
  commentstyle=\color{red},
  keywordstyle=\color{blue}
}
%\usepackage{booktabs}
\usepackage{caption}
\usepackage{subcaption}
\usepackage{float}
\usepackage{array}

\newcolumntype{M}[1]{>{\centering\arraybackslash}m{#1}}
\newcolumntype{N}{@{}m{0pt}@{}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newcommand{\itemEmail}{mvelasquea@unsa.edu.pe}
\newcommand{\itemStudent}{Mikhail Gabino Velasque Arcos}
\newcommand{\itemCourse}{Laboratorio FUNDAMENTOS DE LA PROGRAMACION}
\newcommand{\itemCourseCode}{20214260}
\newcommand{\itemSemester}{II}
\newcommand{\itemUniversity}{Universidad Nacional de San Agustín de Arequipa}
\newcommand{\itemFaculty}{Facultad de Ingeniería de Producción y Servicios}
\newcommand{\itemDepartment}{Departamento Académico de Ingeniería de Sistemas e Informática}
\newcommand{\itemSchool}{Escuela Profesional de Ingeniería de Sistemas}
\newcommand{\itemAcademic}{2023 - B}
\newcommand{\itemInput}{Del 20 Setiembre 2023}
\newcommand{\itemOutput}{Al 27 Setiembre 2023}
\newcommand{\itemPracticeNumber}{03}
\newcommand{\itemTheme}{Areglos y Objetos}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\usepackage[english,spanish]{babel}
\usepackage[utf8]{inputenc}
\AtBeginDocument{\selectlanguage{spanish}}
\renewcommand{\figurename}{Figura}
\renewcommand{\refname}{Referencias}
\renewcommand{\tablename}{Tabla} %esto no funciona cuando se usa babel
\AtBeginDocument{%
	\renewcommand\tablename{Tabla}
}

\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}
\setlength{\headheight}{30pt}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}
\fancyhead[L]{\raisebox{-0.2\height}{\includegraphics[width=3cm]{img/logo_episunsa.png}}}
\fancyhead[C]{\fontsize{7}{7}\selectfont	\itemUniversity \\ \itemFaculty \\ \itemDepartment \\ \itemSchool \\ \textbf{\itemCourse}}
\fancyhead[R]{\raisebox{-0.2\height}{\includegraphics[width=1.2cm]{img/logo_abet}}}
\fancyfoot[L]{Estudiante Mikhail Gabino Velasque Arcos}
\fancyfoot[C]{\itemCourse}
\fancyfoot[R]{Página \thepage}

% para el codigo fuente
\usepackage{listings}
\usepackage{color, colortbl}
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\definecolor{codebackground}{rgb}{0.95, 0.95, 0.92}
\definecolor{tablebackground}{rgb}{0.8, 0, 0}

\lstset{frame=tb,
	language=bash,
	aboveskip=3mm,
	belowskip=3mm,
	showstringspaces=false,
	columns=flexible,
	basicstyle={\small\ttfamily},
	numbers=none,
	numberstyle=\tiny\color{gray},
	keywordstyle=\color{blue},
	commentstyle=\color{dkgreen},
	stringstyle=\color{mauve},
	breaklines=true,
	breakatwhitespace=true,
	tabsize=3,
	backgroundcolor= \color{codebackground},
}

\begin{document}
	
	\vspace*{10px}
	
	\begin{center}	
		\fontsize{17}{17} \textbf{ Informe de Laboratorio 03 }
	\end{center}
	\centerline{\textbf{\Large Tema: Arreglos de Objetos}}
	%\vspace*{0.5cm}	

	\begin{flushright}
		\begin{tabular}{|M{2.5cm}|N|}
			\hline 
			\rowcolor{tablebackground}
			\color{white} \textbf{Nota}  \\
			\hline 
			     \\[30pt]
			\hline 			
		\end{tabular}
	\end{flushright}	

	\begin{table}[H]
		\begin{tabular}{|x{4.7cm}|x{4.8cm}|x{4.8cm}|}
			\hline 
			\rowcolor{tablebackground}
			\color{white} \textbf{Estudiante} & \color{white}\textbf{Escuela}  & \color{white}\textbf{Asignatura}   \\
			\hline 
			{\itemStudent \par \itemEmail} & \itemSchool & {\itemCourse \par Semestre: \itemSemester \par Código: \itemCourseCode}     \\
			\hline 			
		\end{tabular}
	\end{table}		
	
	\begin{table}[H]
		\begin{tabular}{|x{4.7cm}|x{4.8cm}|x{4.8cm}|}
			\hline 
			\rowcolor{tablebackground}
			\color{white}\textbf{Laboratorio} & \color{white}\textbf{Tema}  & \color{white}\textbf{Duración}   \\
			\hline 
			\itemPracticeNumber & \itemTheme & 04 horas   \\
			\hline 
		\end{tabular}
	\end{table}
	
	\begin{table}[H]
		\begin{tabular}{|x{4.7cm}|x{4.8cm}|x{4.8cm}|}
			\hline 
			\rowcolor{tablebackground}
			\color{white}\textbf{Semestre académico} & \color{white}\textbf{Fecha de inicio}  & \color{white}\textbf{Fecha de entrega}   \\
			\hline 
			\itemAcademic & \itemInput &  \itemOutput  \\
			\hline 
		\end{tabular}
	\end{table}
	
	\section{Actividad }
	\begin{itemize}		
		\item Cree un Proyecto llamado Laboratorio3
Usted deberá agregar las clases Nave.java y DemoBatalla.java.
Analice, complete y pruebe el Código de la clase DemoBatalla
		\item Solucionar la Actividad 4 de la Práctica 1 pero usando arreglo de objetos
		\item Solucionar la Actividad 5 de la Práctica 1 pero usando arreglos de objetos
	\end{itemize}
		
	\section{SOLUCIONARIO}
	\begin{itemize}
		\item Se hace el uso de arreglo de objetos  como el de nave.java y DemoBatalla.java para completar la actividad como se muestra en la siguiente seccion
	\end{itemize}

	\subsection{CODIGO FUENTE}
	\begin{itemize}	
		\item Se crea la clase Nave.
		\item Se crea la clase principal:
	\end{itemize}	
		
	\begin{lstlisting}[language=bash,caption={Creando la clase Nave}][H]
		vim Nave.java
		  vim DemoBatalla.java
	\end{lstlisting}
	
	\begin{lstlisting}[language=bash,caption={Creando la clase Nave}][H]
			public class Nave {
			private String nombre;
			private int fila;
			private String columna;
			private boolean estado;
			private int puntos;
			// Metodos mutadores
			public void setNombre( String n){
			nombre = n;
			}
			public void setFila(int f){
			fila = f;
			}
			public void setColumna(String c){
			columna = c;
			}
			public void setEstado(boolean e){
			estado = e;
			}
			public void setPuntos(int p){
			puntos = p;
			}
			// Metodos accesores
			public String getNombre(){
			return nombre;
	}
			public int getFila(){
			return fila;
	}
			public String getColumna(){
			return columna;
			}
			public boolean getEstado(){
			return estado;
			}
			public int getPuntos(){
			return puntos;
	}
			}
	\end{lstlisting}	
	\begin{lstlisting}[language=bash,caption={Creando la clase principal de DemoBatalla.java}][H]
	public class DemoBatalla {
	public static void main(String [] args){
		Nave [] misNaves = new Nave[10];
		Scanner sc = new Scanner(System.in);
		String nomb, col;
		int fil, punt;
		boolean est;
		for (int i = 0; i < misNaves.length; i++) {
		System.out.println("Nave " + (i+1));
		System.out.print("Nombre: ");
		nomb = sc.next();
		System.out.println("Fila ");
		fil = sc.nextInt();
		System.out.print("Columna: ");
		col = sc.next();
		System.out.print("Estado: ");
		est = sc.nextBoolean();
		System.out.print("Puntos: ");
		punt = sc.nextInt();
		misNaves[i] = new Nave(); //Se crea un objeto Nave y se asigna su referencia a misNaves
		misNaves[i].setNombre(nomb);
		misNaves[i].setFila(fil);
		misNaves[i].setColumna(col);
		misNaves[i].setEstado(est);
		misNaves[i].setPuntos(punt);
		}
		System.out.println("\nNaves creadas:");
		mostrarNaves(misNaves);
		mostrarPorNombre(misNaves);
		mostrarPorPuntos(misNaves);
		System.out.println("\nNave con mayor número de puntos: " + mostrarMayorPuntos(misNaves));
		}
		//Método para mostrar todas las naves
		public static void mostrarNaves(Nave [] flota){
			for (int i = 0; i < flota.length; i++) {
				System.out.println("NOMBRE: " +flota[i].getNombre());
				System.out.println("FILA: " +flota[i].getFila());
				System.out.println("COLUMNA: " +flota[i].getColumna());
				if (flota[i].getEstado()==true) {
				System.out.println("vivo");
				} else {
				System.out.println("muerto");
				}
				System.out.println("PUNTOS DE VIDA: "+flota[i].getPuntos());
				}}
		//Método para mostrar todas las naves de un nombre que se pide por teclado
		public static void mostrarPorNombre(Nave [] flota){
			String nombre;
			System.out.println("INGRESAR EL NOMBRE DEL QUE SE BUSCA");
			Scanner objeto= new Scanner(System.in);
			nombre=objeto.nextLine();
			for (int i = 0; i < flota.length; i++) {
			if (flota[i].getNombre().equals(nombre)) {
			System.out.println("COINCIDENCIA CON: "+nombre);
			System.out.println("NOMBRE: " +flota[i].getNombre());
			System.out.println("FILA: " +flota[i].getFila());
			System.out.println("COLUMNA: " +flota[i].getColumna());
			if (flota[i].getEstado()==true) {
			System.out.println("vivo");
			} else {
			System.out.println("esta muerto");
			}
			System.out.println("PUNTOS DE VIDA: "+flota[i].getPuntos());
			break;
			}else{
			System.out.println("---");
			}}}
		//Método para mostrar todas las naves con un número de puntos inferior o igual
		//al número de puntos que se pide por teclado
		public static void mostrarPorPuntos(Nave [] flota){
			for (int i = 0; i < flota.length; i++) {
				int puntoComparacion;
				System.out.println("INGRESE LA CANTIDAD DE VIDA QUE DESEA COMPARAR");
				Scanner objeto= new Scanner(System.in);
				puntoComparacion=objeto.nextInt();
				for (int j = 0; j < flota.length; j++) {
				if (flota[i].getPuntos()<=puntoComparacion) {
				System.out.println("NOMBRE: " +flota[i].getNombre());
				System.out.println("FILA: " +flota[i].getFila());
				System.out.println("COLUMNA: " +flota[i].getColumna());
				if (flota[i].getEstado()==true) {
				System.out.println("vivo");
				} else {
				System.out.println("muerto");
				}
				System.out.println("PUNTOS DE VIDA: "+flota[i].getPuntos());
				}else{
				System.out.println("---");
				}}}}
		//Método que devuelve la Nave con mayor número de Puntos

			public static Nave mostrarMayorPuntos(Nave[] flota) {
			    Nave naveMayor = flota[0]; // Supongamos que la primera nave tiene la mayor cantidad de puntos inicialmente
			    for (int i = 1; i < flota.length; i++) {
			        if (flota[i].getPuntos() > naveMayor.getPuntos()) {
			            naveMayor = flota[i];
			        }
			    }
			    return naveMayor;
			}
		}
	\end{lstlisting}

			
\end{document}